@page "/weather"
@using RabbitMQ.Client
@using System.Text
@using System.Text.Json
@using aspireotel.QueueCommon
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject WeatherApiClient WeatherApi
@inject IServiceProvider ServiceProvider
@inject ILogger<Weather> Logger

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>
    This component demonstrates showing data loaded from a backend API service. <br />
</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private IConnection? _messageConnection;
    private IModel? _messageChannel;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();

        Logger.LogInformation($"Sending message...");
        
        _messageConnection = ServiceProvider.GetRequiredService<IConnection>();
        _messageChannel = _messageConnection.CreateModel();
        _messageChannel.QueueDeclare(Queue.Orders, durable: true, exclusive: false);

        var body = Encoding.UTF8.GetBytes("Hello World!");
        var properties = _messageChannel.CreateBasicProperties();
        properties.Persistent = true;

        _messageChannel.BasicPublish(exchange: string.Empty,
                                    routingKey: Queue.Orders,
                                    basicProperties: properties,
                                    body: body);        
    }
}
